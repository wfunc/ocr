name: Auto Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  release:
    runs-on: ubuntu-latest
    if: >-
      ${{ github.actor != 'github-actions[bot]' &&
          (github.event_name != 'push' || github.event.head_commit == null ||
           !contains(github.event.head_commit.message, '[skip ci]')) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Calculate next version
        id: bump
        run: |
          VERSION_FILE=VERSION
          TAG_VERSION=$(git tag -l 'v*' --sort=-v:refname | head -n1 | sed 's/^v//')
          [ -z "$TAG_VERSION" ] && TAG_VERSION="0.0.0"
          if [ -f "$VERSION_FILE" ]; then
            FILE_VERSION=$(tr -d ' \n' < "$VERSION_FILE")
          else
            FILE_VERSION="0.0.0"
          fi
          CURRENT_VERSION=$(printf '%s\n%s\n' "$TAG_VERSION" "$FILE_VERSION" | sort -V | tail -n1)
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          MAJOR=${MAJOR:-0}
          MINOR=${MINOR:-0}
          PATCH=${PATCH:-0}
          PATCH=$((PATCH + 1))
          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "$NEW_VERSION" > "$VERSION_FILE"
          echo "current=$CURRENT_VERSION" >> "$GITHUB_OUTPUT"
          echo "version=$NEW_VERSION" >> "$GITHUB_OUTPUT"

      - name: Commit version bump
        run: |
          if git diff --quiet VERSION; then
            echo "No version change detected; skipping commit"
            exit 0
          fi
          VERSION="${{ steps.bump.outputs.version }}"
          git add VERSION
          git commit -m "chore: release v${VERSION} [skip ci]"

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: false

      - name: Build release packages
        run: |
          set -euo pipefail
          VERSION="${{ steps.bump.outputs.version }}"
          mkdir -p dist
          for ARCH in amd64 arm64; do
            BIN="ocr-server-linux-${ARCH}"
            GOOS=linux GOARCH="${ARCH}" CGO_ENABLED=0 go build -o "dist/${BIN}" ./main.go
            PKG_DIR="dist/pkg-${ARCH}"
            mkdir -p "${PKG_DIR}"
            cp "dist/${BIN}" "${PKG_DIR}/ocr-server"
            cp ocr.py requirements.txt "${PKG_DIR}/"
            printf '%s\n' \
              'OCR 服务部署包' \
              '================' \
              '' \
              '运行步骤：' \
              '1. 安装/确保存在 Python 3.12 及 requirements.txt 中依赖。' \
              '2. 在解压目录运行 ./ocr-server，服务默认监听 8080 端口。' \
              '3. 通过 GET/POST /ocr 接口传入图片 URL 或 Base64 数据。' \
              > "${PKG_DIR}/README.txt"
            tar -czf "dist/ocr-server-${VERSION}-linux-${ARCH}.tar.gz" -C "${PKG_DIR}" .
            rm -rf "${PKG_DIR}" "dist/${BIN}"
          done
          (cd dist && sha256sum *.tar.gz > SHA256SUMS)

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          provenance: false
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ steps.bump.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.bump.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/ocr:v${{ steps.bump.outputs.version }}
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/ocr:${{ steps.bump.outputs.version }}
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/ocr:latest

      - name: Create and push tag
        run: |
          VERSION="${{ steps.bump.outputs.version }}"
          TAG="v${VERSION}"
          git tag "$TAG"
          git push origin HEAD:main "$TAG"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.bump.outputs.version }}
          name: v${{ steps.bump.outputs.version }}
          draft: false
          prerelease: false
          files: |
            dist/ocr-server-${{ steps.bump.outputs.version }}-linux-amd64.tar.gz
            dist/ocr-server-${{ steps.bump.outputs.version }}-linux-arm64.tar.gz
            dist/SHA256SUMS
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
